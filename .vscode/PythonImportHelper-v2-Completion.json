[
    {
        "label": "network",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "network",
        "description": "network",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Pin",
        "importPath": "machine",
        "description": "machine",
        "isExtraImport": true,
        "detail": "machine",
        "documentation": {}
    },
    {
        "label": "connect_to_wifi",
        "kind": 2,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "def connect_to_wifi(ssid, password):\n    station = network.WLAN(network.STA_IF)\n    station.active(True)\n    station.connect(ssid, password)\n    while not station.isconnected():\n        print(\"Connecting to WiFi...\")\n        time.sleep(1)\n    print(\"Connected to WiFi!\")\n    print(\"IP Address:\", station.ifconfig()[0])\n    return station.ifconfig()[0]",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "create_response",
        "kind": 2,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "def create_response(content):\n    return 'HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nAccess-Control-Allow-Origin: *\\r\\n\\r\\n' + content\ndef handle_request(request):\n    print(\"Request received:\", request)\n    if '/light1/on' in request:\n        light_relay1.value(1)\n        return create_response(\"Light 1 turned on\")\n    elif '/light1/off' in request:\n        light_relay1.value(0)\n        return create_response(\"Light 1 turned off\")",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "handle_request",
        "kind": 2,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "def handle_request(request):\n    print(\"Request received:\", request)\n    if '/light1/on' in request:\n        light_relay1.value(1)\n        return create_response(\"Light 1 turned on\")\n    elif '/light1/off' in request:\n        light_relay1.value(0)\n        return create_response(\"Light 1 turned off\")\n    elif '/light2/on' in request:\n        light_relay2.value(1)",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "start_server",
        "kind": 2,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "def start_server():\n    ssid = input(\"SSID: \")\n    password = input(\"Password: \")\n    ip = connect_to_wifi(ssid, password)\n    # Start the HTTP server on port 80\n    addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]\n    s = socket.socket()\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s.bind(addr)\n    s.listen(5)",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "light_relay1",
        "kind": 5,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "light_relay1 = Pin(12, Pin.OUT)\nlight_relay2 = Pin(14, Pin.OUT)\nlight_relay3 = Pin(27, Pin.OUT)\nlight_relay4 = Pin(26, Pin.OUT)\nfan_relay = Pin(25, Pin.OUT)\ndef connect_to_wifi(ssid, password):\n    station = network.WLAN(network.STA_IF)\n    station.active(True)\n    station.connect(ssid, password)\n    while not station.isconnected():",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "light_relay2",
        "kind": 5,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "light_relay2 = Pin(14, Pin.OUT)\nlight_relay3 = Pin(27, Pin.OUT)\nlight_relay4 = Pin(26, Pin.OUT)\nfan_relay = Pin(25, Pin.OUT)\ndef connect_to_wifi(ssid, password):\n    station = network.WLAN(network.STA_IF)\n    station.active(True)\n    station.connect(ssid, password)\n    while not station.isconnected():\n        print(\"Connecting to WiFi...\")",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "light_relay3",
        "kind": 5,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "light_relay3 = Pin(27, Pin.OUT)\nlight_relay4 = Pin(26, Pin.OUT)\nfan_relay = Pin(25, Pin.OUT)\ndef connect_to_wifi(ssid, password):\n    station = network.WLAN(network.STA_IF)\n    station.active(True)\n    station.connect(ssid, password)\n    while not station.isconnected():\n        print(\"Connecting to WiFi...\")\n        time.sleep(1)",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "light_relay4",
        "kind": 5,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "light_relay4 = Pin(26, Pin.OUT)\nfan_relay = Pin(25, Pin.OUT)\ndef connect_to_wifi(ssid, password):\n    station = network.WLAN(network.STA_IF)\n    station.active(True)\n    station.connect(ssid, password)\n    while not station.isconnected():\n        print(\"Connecting to WiFi...\")\n        time.sleep(1)\n    print(\"Connected to WiFi!\")",
        "detail": "ESP32Server",
        "documentation": {}
    },
    {
        "label": "fan_relay",
        "kind": 5,
        "importPath": "ESP32Server",
        "description": "ESP32Server",
        "peekOfCode": "fan_relay = Pin(25, Pin.OUT)\ndef connect_to_wifi(ssid, password):\n    station = network.WLAN(network.STA_IF)\n    station.active(True)\n    station.connect(ssid, password)\n    while not station.isconnected():\n        print(\"Connecting to WiFi...\")\n        time.sleep(1)\n    print(\"Connected to WiFi!\")\n    print(\"IP Address:\", station.ifconfig()[0])",
        "detail": "ESP32Server",
        "documentation": {}
    }
]